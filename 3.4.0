//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package com.localytics.android;

import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.location.Location;
import android.support.v4.app.FragmentActivity;
import com.localytics.android.AnalyticsListener;
import com.localytics.android.Constants;
import com.localytics.android.LocalyticsManager;
import com.localytics.android.MessagingListener;
import java.util.Date;
import java.util.Map;

public class Localytics {
    public Localytics() {
    }

    public static void integrate(Context context) {
        integrate(context, (String)null);
    }

    public static void integrate(Context context, String localyticsKey) {
        if(context == null) {
            throw new IllegalArgumentException("context cannot be null");
        } else {
            LocalyticsManager.getInstance().integrate(context, localyticsKey);
        }
    }

    public static void upload() {
        LocalyticsManager.getInstance().upload();
    }

    static boolean isAutoIntegrate() {
        return LocalyticsManager.getInstance().isAutoIntegrate();
    }

    static void setIsAutoIntegrate(boolean autoIntegrate) {
        LocalyticsManager.getInstance().setIsAutoIntegrate(autoIntegrate);
    }

    static boolean isAppInForeground() {
        return LocalyticsManager.getInstance().isAppInForeground();
    }

    static void incrementActivityCounter() {
        LocalyticsManager.getInstance().incrementActivityCounter();
    }

    static void decrementActivityCounter() {
        LocalyticsManager.getInstance().decrementActivityCounter();
    }

    public static void setOptedOut(boolean newOptOut) {
        LocalyticsManager.getInstance().setOptedOut(newOptOut);
    }

    public static boolean isOptedOut() {
        return LocalyticsManager.getInstance().isOptedOut();
    }

    public static void openSession() {
        LocalyticsManager.getInstance().openSession();
    }

    public static void closeSession() {
        LocalyticsManager.getInstance().closeSession();
    }

    public static void tagEvent(String eventName) {
        tagEvent(eventName, (Map)null, 0L);
    }

    public static void tagEvent(String eventName, Map<String, String> attributes) {
        tagEvent(eventName, attributes, 0L);
    }

    public static void tagEvent(String eventName, Map<String, String> attributes, long customerValueIncrease) {
        LocalyticsManager.getInstance().tagEvent(eventName, attributes, customerValueIncrease);
    }

    public static void tagScreen(String screen) {
        LocalyticsManager.getInstance().tagScreen(screen);
    }

    public static void setCustomDimension(int dimension, String value) {
        LocalyticsManager.getInstance().setCustomDimension(dimension, value);
    }

    public static String getCustomDimension(int dimension) {
        return LocalyticsManager.getInstance().getCustomDimension(dimension);
    }

    public static void addAnalyticsListener(AnalyticsListener listener) {
        LocalyticsManager.getInstance().addAnalyticsListener(listener);
    }

    public static void removeAnalyticsListener(AnalyticsListener listener) {
        LocalyticsManager.getInstance().removeAnalyticsListener(listener);
    }

    public static void setProfileAttribute(String attributeName, long attributeValue, Localytics.ProfileScope scope) {
        LocalyticsManager.getInstance().setProfileAttribute(attributeName, attributeValue, scope);
    }

    public static void setProfileAttribute(String attributeName, long attributeValue) {
        setProfileAttribute(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void setProfileAttribute(String attributeName, long[] attributeValue, Localytics.ProfileScope scope) {
        LocalyticsManager.getInstance().setProfileAttribute(attributeName, attributeValue, scope);
    }

    public static void setProfileAttribute(String attributeName, long[] attributeValue) {
        setProfileAttribute(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void setProfileAttribute(String attributeName, String attributeValue, Localytics.ProfileScope scope) {
        LocalyticsManager.getInstance().setProfileAttribute(attributeName, attributeValue, scope);
    }

    public static void setProfileAttribute(String attributeName, String attributeValue) {
        setProfileAttribute(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void setProfileAttribute(String attributeName, String[] attributeValue, Localytics.ProfileScope scope) {
        LocalyticsManager.getInstance().setProfileAttribute(attributeName, attributeValue, scope);
    }

    public static void setProfileAttribute(String attributeName, String[] attributeValue) {
        setProfileAttribute(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void setProfileAttribute(String attributeName, Date attributeValue, Localytics.ProfileScope scope) {
        LocalyticsManager.getInstance().setProfileAttribute(attributeName, attributeValue, scope);
    }

    public static void setProfileAttribute(String attributeName, Date attributeValue) {
        setProfileAttribute(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void setProfileAttribute(String attributeName, Date[] attributeValue, Localytics.ProfileScope scope) {
        LocalyticsManager.getInstance().setProfileAttribute(attributeName, attributeValue, scope);
    }

    public static void setProfileAttribute(String attributeName, Date[] attributeValue) {
        setProfileAttribute(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void addProfileAttributesToSet(String attributeName, long[] attributeValue, Localytics.ProfileScope scope) {
        LocalyticsManager.getInstance().addProfileAttributesToSet(attributeName, attributeValue, scope);
    }

    public static void addProfileAttributesToSet(String attributeName, long[] attributeValue) {
        addProfileAttributesToSet(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void addProfileAttributesToSet(String attributeName, String[] attributeValue, Localytics.ProfileScope scope) {
        LocalyticsManager.getInstance().addProfileAttributesToSet(attributeName, attributeValue, scope);
    }

    public static void addProfileAttributesToSet(String attributeName, String[] attributeValue) {
        addProfileAttributesToSet(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void addProfileAttributesToSet(String attributeName, Date[] attributeValue, Localytics.ProfileScope scope) {
        LocalyticsManager.getInstance().addProfileAttributesToSet(attributeName, attributeValue, scope);
    }

    public static void addProfileAttributesToSet(String attributeName, Date[] attributeValue) {
        addProfileAttributesToSet(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void removeProfileAttributesFromSet(String attributeName, long[] attributeValue, Localytics.ProfileScope scope) {
        LocalyticsManager.getInstance().removeProfileAttributesFromSet(attributeName, attributeValue, scope);
    }

    public static void removeProfileAttributesFromSet(String attributeName, long[] attributeValue) {
        removeProfileAttributesFromSet(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void removeProfileAttributesFromSet(String attributeName, String[] attributeValue, Localytics.ProfileScope scope) {
        LocalyticsManager.getInstance().removeProfileAttributesFromSet(attributeName, attributeValue, scope);
    }

    public static void removeProfileAttributesFromSet(String attributeName, String[] attributeValue) {
        removeProfileAttributesFromSet(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void removeProfileAttributesFromSet(String attributeName, Date[] attributeValue, Localytics.ProfileScope scope) {
        LocalyticsManager.getInstance().removeProfileAttributesFromSet(attributeName, attributeValue, scope);
    }

    public static void removeProfileAttributesFromSet(String attributeName, Date[] attributeValue) {
        removeProfileAttributesFromSet(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void incrementProfileAttribute(String attributeName, long incrementValue, Localytics.ProfileScope scope) {
        LocalyticsManager.getInstance().incrementProfileAttribute(attributeName, incrementValue, scope);
    }

    public static void incrementProfileAttribute(String attributeName, long incrementValue) {
        incrementProfileAttribute(attributeName, incrementValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void decrementProfileAttribute(String attributeName, long decrementValue, Localytics.ProfileScope scope) {
        LocalyticsManager.getInstance().incrementProfileAttribute(attributeName, -1L * decrementValue, scope);
    }

    public static void decrementProfileAttribute(String attributeName, long decrementValue) {
        decrementProfileAttribute(attributeName, decrementValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void deleteProfileAttribute(String attributeName, Localytics.ProfileScope scope) {
        LocalyticsManager.getInstance().deleteProfileAttribute(attributeName, scope);
    }

    public static void deleteProfileAttribute(String attributeName) {
        deleteProfileAttribute(attributeName, Localytics.ProfileScope.APPLICATION);
    }

    public static void setCustomerEmail(String email) {
        setSpecialCustomerIdentifierAndAttribute("email", email);
    }

    public static void setCustomerFirstName(String firstName) {
        setSpecialCustomerIdentifierAndAttribute("first_name", firstName);
    }

    public static void setCustomerLastName(String lastName) {
        setSpecialCustomerIdentifierAndAttribute("last_name", lastName);
    }

    public static void setCustomerFullName(String fullName) {
        setSpecialCustomerIdentifierAndAttribute("full_name", fullName);
    }

    private static void setSpecialCustomerIdentifierAndAttribute(String key, String value) {
        setProfileAttribute("$" + key, value, Localytics.ProfileScope.ORGANIZATION);
        setIdentifier(key, value);
    }

    public static void setInAppMessageDisplayActivity(FragmentActivity activity) {
        LocalyticsManager.getInstance().setInAppMessageDisplayActivity(activity);
    }

    public static void clearInAppMessageDisplayActivity() {
        LocalyticsManager.getInstance().clearInAppMessageDisplayActivity();
    }

    public static void triggerInAppMessage(String triggerName) {
        triggerInAppMessage(triggerName, (Map)null);
    }

    public static void triggerInAppMessage(String triggerName, Map<String, String> attributes) {
        LocalyticsManager.getInstance().triggerInAppMessage(triggerName, attributes, false);
    }

    public static void dismissCurrentInAppMessage() {
        LocalyticsManager.getInstance().dismissCurrentInAppMessage();
    }

    public static void registerPush(String senderId) {
        LocalyticsManager.getInstance().registerPush(senderId);
    }

    static void registerPush(String senderId, long delay) {
        LocalyticsManager.getInstance().registerPush(senderId, delay);
    }

    public static String getPushRegistrationId() {
        return LocalyticsManager.getInstance().getPushRegistrationId();
    }

    public static void setPushRegistrationId(String registrationId) {
        LocalyticsManager.getInstance().setPushRegistrationId(registrationId);
    }

    public static void setPushDisabled(boolean disable) {
        LocalyticsManager.getInstance().setPushDisabled(disable);
    }

    public static boolean isPushDisabled() {
        return LocalyticsManager.getInstance().isPushDisabled();
    }

    public static void handlePushNotificationOpened(Intent intent) {
        LocalyticsManager.getInstance().handlePushNotificationOpened(intent);
    }

    static void handleRegistration(Intent intent) {
        LocalyticsManager.getInstance().handleRegistration(intent);
    }

    static void handleNotificationReceived(Intent intent) {
        LocalyticsManager.getInstance().handleNotificationReceived(intent);
    }

    public static void handleTestMode(Intent intent) {
        LocalyticsManager.getInstance().handleTestMode(intent);
    }

    public static void setTestModeEnabled(boolean enabled) {
        LocalyticsManager.getInstance().setTestModeEnabled(enabled);
    }

    public static boolean isTestModeEnabled() {
        return LocalyticsManager.getInstance().isTestModeEnabled();
    }

    public static void setInAppMessageDismissButtonImage(Resources resources, int id) {
        LocalyticsManager.getInstance().setInAppMessageDismissButtonImage(resources, id);
    }

    public static void setInAppMessageDismissButtonImage(Resources resources, Bitmap image) {
        LocalyticsManager.getInstance().setInAppMessageDismissButtonImage(resources, image);
    }

    public static void addMessagingListener(MessagingListener listener) {
        LocalyticsManager.getInstance().addMessagingListener(listener);
    }

    public static void removeMessagingListener(MessagingListener listener) {
        LocalyticsManager.getInstance().removeMessagingListener(listener);
    }

    public static void setIdentifier(String key, String value) {
        LocalyticsManager.getInstance().setIdentifier(key, value);
    }

    public static void setCustomerId(String customerId) {
        setIdentifier("customer_id", customerId);
    }

    public static String getCustomerId() {
        return getIdentifier("customer_id");
    }

    public static String getIdentifier(String key) {
        return LocalyticsManager.getInstance().getIdentifier(key);
    }

    public static void setLocation(Location location) {
        LocalyticsManager.getInstance().setLocation(location);
    }

    public static void setLoggingEnabled(boolean enabled) {
        Constants.IS_LOGGING_ENABLED = enabled;
    }

    public static boolean isLoggingEnabled() {
        return Constants.IS_LOGGING_ENABLED;
    }

    public static void setSessionTimeoutInterval(long seconds) {
        Constants.SESSION_EXPIRATION = seconds * 1000L;
    }

    public static long getSessionTimeoutInterval() {
        return Constants.SESSION_EXPIRATION / 1000L;
    }

    public static String getInstallId() {
        return LocalyticsManager.getInstance().getInstallationId();
    }

    public static String getAppKey() {
        return LocalyticsManager.getInstance().getAppKey();
    }

    public static String getLibraryVersion() {
        return "androida_3.4.0";
    }

    public static void setInAppMessageDismissButtonLocation(Localytics.InAppMessageDismissButtonLocation buttonLocation) {
        LocalyticsManager.getInstance().setInAppMessageDismissButtonLocation(buttonLocation);
    }

    public static Localytics.InAppMessageDismissButtonLocation getInAppMessageDismissButtonLocation() {
        return LocalyticsManager.getInstance().getInAppMessageDismissButtonLocation();
    }

    public static String getAnalyticsHost() {
        return Constants.ANALYTICS_HOST;
    }

    public static void setAnalyticsHost(String host) {
        Constants.ANALYTICS_HOST = host;
    }

    public static String getMessagingHost() {
        return Constants.MARKETING_HOST;
    }

    public static void setMessagingHost(String host) {
        Constants.MARKETING_HOST = host;
    }

    public static String getProfilesHost() {
        return Constants.PROFILES_HOST;
    }

    public static void setProfilesHost(String host) {
        Constants.PROFILES_HOST = host;
    }

    static final class Log {
        Log() {
        }

        static int d(String msg) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.d("Localytics", msg):-1;
        }

        static int d(String msg, Throwable tr) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.d("Localytics", msg, tr):-1;
        }

        static int e(String msg) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.e("Localytics", msg):-1;
        }

        static int e(String msg, Throwable tr) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.e("Localytics", msg, tr):-1;
        }

        static int i(String msg) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.i("Localytics", msg):-1;
        }

        static int i(String msg, Throwable tr) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.i("Localytics", msg, tr):-1;
        }

        static int v(String msg, Throwable tr) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.v("Localytics", msg, tr):-1;
        }

        static int v(String msg) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.v("Localytics", msg):-1;
        }

        static int w(Throwable tr) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.w("Localytics", tr):-1;
        }

        static int w(String msg, Throwable tr) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.w("Localytics", msg, tr):-1;
        }

        static int w(String msg) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.w("Localytics", msg):-1;
        }

        static int wtf(Throwable tr) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.wtf("Localytics", tr):-1;
        }

        static int wtf(String msg, Throwable tr) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.wtf("Localytics", msg, tr):-1;
        }

        static int wtf(String msg) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.wtf("Localytics", msg):-1;
        }
    }

    public static enum ProfileScope {
        ORGANIZATION("org"),
        APPLICATION("app");

        private final String scope;

        private ProfileScope(String sc) {
            this.scope = sc;
        }

        public String getScope() {
            return this.scope;
        }
    }

    public static enum InAppMessageDismissButtonLocation {
        LEFT,
        RIGHT;

        private InAppMessageDismissButtonLocation() {
        }
    }
}
