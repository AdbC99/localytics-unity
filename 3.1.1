//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package com.localytics.android;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory.Options;
import android.location.Location;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.text.TextUtils;
import android.util.TypedValue;
import com.localytics.android.AnalyticsHandler;
import com.localytics.android.AnalyticsListener;
import com.localytics.android.Constants;
import com.localytics.android.DatapointHelper;
import com.localytics.android.MarketingHandler;
import com.localytics.android.MessagingListener;
import com.localytics.android.ProfileHandler;
import com.localytics.android.PushReceiver;
import com.localytics.android.PushTrackingActivity;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;

public class Localytics {
    private static AnalyticsHandler analyticsHandler = null;
    private static ProfileHandler profileHandler = null;
    private static MarketingHandler marketingHandler = null;
    static Context appContext = null;
    static String apiKey = null;
    static String installationID = null;
    private static String customerID = null;
    private static int activityCounter = 0;
    private static boolean isAutoIntegrate = false;
    static CountDownLatch initiatedLatch = new CountDownLatch(1);

    public static void integrate(Context context) {
        integrate(context, (String)null);
    }

    public static void integrate(Context context, String localyticsKey) {
        if(null == analyticsHandler || null == profileHandler || null == marketingHandler) {
            if(context == null) {
                throw new IllegalArgumentException("context cannot be null");
            } else if("com.localytics.android".equals(context.getPackageName()) && !context.getClass().getName().equals("android.test.IsolatedContext") && !context.getClass().getName().equals("android.test.RenamingDelegatingContext")) {
                throw new IllegalArgumentException(String.format("context.getPackageName() returned %s", new Object[]{context.getPackageName()}));
            } else {
                boolean isRenamingDelegatingContext = context.getClass().getName().equals("android.test.RenamingDelegatingContext");
                if(!isRenamingDelegatingContext && context instanceof Activity) {
                    throw new IllegalStateException("Activity context use is not supported. You must call integrate() or registerActivityLifecycleCallbacks() from your Application class (see integration guide). If migrating from 3.0, see https://support.localytics.com/Android_SDK_Migration_3.0_to_3.x");
                } else {
                    appContext = isRenamingDelegatingContext?context:context.getApplicationContext();
                    apiKey = localyticsKey;
                    if(TextUtils.isEmpty(apiKey)) {
                        apiKey = DatapointHelper.getLocalyticsAppKeyOrNull(appContext);
                    }

                    if(TextUtils.isEmpty(apiKey)) {
                        throw new IllegalArgumentException("App key must be declared in a meta data tag in AndroidManifest.xml or passed into integrate(final Context context, final String localyticsKey) or new LocalyticsActivityLifecycleCallbacks(final Context context, final String localyticsKey) (see integration guide).");
                    } else {
                        try {
                            PackageInfo e = appContext.getPackageManager().getPackageInfo(appContext.getPackageName(), 3);
                            if(classInManifest(e.receivers, PushReceiver.class.getName()) && !classInManifest(e.activities, PushTrackingActivity.class.getName())) {
                                throw new IllegalStateException("PushTrackingActivity must be declared in AndroidManifest.xml (see integration guide). If migrating from 3.0, see https://support.localytics.com/Android_SDK_Migration_3.0_to_3.x");
                            }
                        } catch (NameNotFoundException var4) {
                            var4.printStackTrace();
                        }

                        analyticsHandler = new AnalyticsHandler(getHandlerThread(AnalyticsHandler.class.getSimpleName()).getLooper());
                        profileHandler = new ProfileHandler(getHandlerThread(ProfileHandler.class.getSimpleName()).getLooper());
                        marketingHandler = new MarketingHandler(getHandlerThread(MarketingHandler.class.getSimpleName()).getLooper());
                    }
                }
            }
        }
    }

    public static void upload() {
        if(!TextUtils.isEmpty(apiKey)) {
            String custId = getCustomerIdInMemory();
            getProfileHandler().upload(custId);
            getAnalyticsHandler().upload(custId);
        }

    }

    public static void setOptedOut(boolean newOptOut) {
        getAnalyticsHandler().setOptedOut(newOptOut);
    }

    public static boolean isOptedOut() {
        return getAnalyticsHandler().isOptedOut();
    }

    public static void openSession() {
        getAnalyticsHandler().openSession();
    }

    public static void closeSession() {
        getAnalyticsHandler().closeSession();
    }

    public static void tagEvent(String eventName) {
        tagEvent(eventName, (Map)null, 0L);
    }

    public static void tagEvent(String eventName, Map<String, String> attributes) {
        tagEvent(eventName, attributes, 0L);
    }

    public static void tagEvent(String eventName, Map<String, String> attributes, long customerValueIncrease) {
        getAnalyticsHandler().tagEvent(eventName, attributes, customerValueIncrease);
    }

    public static void tagScreen(String screen) {
        getAnalyticsHandler().tagScreen(screen);
    }

    public static void setCustomDimension(int dimension, String value) {
        getAnalyticsHandler().setCustomDimension(dimension, value);
    }

    public static String getCustomDimension(int dimension) {
        return getAnalyticsHandler().getCustomDimension(dimension);
    }

    public static void addAnalyticsListener(AnalyticsListener listener) {
        getAnalyticsHandler().addListener(listener);
    }

    public static void removeAnalyticsListener(AnalyticsListener listener) {
        getAnalyticsHandler().removeListener(listener);
    }

    public static void setProfileAttribute(String attributeName, long attributeValue, Localytics.ProfileScope scope) {
        getProfileHandler().setProfileAttribute(attributeName, attributeValue, scope.getScope());
    }

    public static void setProfileAttribute(String attributeName, long attributeValue) {
        setProfileAttribute(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void setProfileAttribute(String attributeName, long[] attributeValue, Localytics.ProfileScope scope) {
        getProfileHandler().setProfileAttribute(attributeName, attributeValue, scope.getScope());
    }

    public static void setProfileAttribute(String attributeName, long[] attributeValue) {
        setProfileAttribute(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void setProfileAttribute(String attributeName, String attributeValue, Localytics.ProfileScope scope) {
        getProfileHandler().setProfileAttribute(attributeName, attributeValue, scope.getScope());
    }

    public static void setProfileAttribute(String attributeName, String attributeValue) {
        setProfileAttribute(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void setProfileAttribute(String attributeName, String[] attributeValue, Localytics.ProfileScope scope) {
        getProfileHandler().setProfileAttribute(attributeName, attributeValue, scope.getScope());
    }

    public static void setProfileAttribute(String attributeName, String[] attributeValue) {
        setProfileAttribute(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void setProfileAttribute(String attributeName, Date attributeValue, Localytics.ProfileScope scope) {
        getProfileHandler().setProfileAttribute(attributeName, attributeValue, scope.getScope());
    }

    public static void setProfileAttribute(String attributeName, Date attributeValue) {
        setProfileAttribute(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void setProfileAttribute(String attributeName, Date[] attributeValue, Localytics.ProfileScope scope) {
        getProfileHandler().setProfileAttribute(attributeName, attributeValue, scope.getScope());
    }

    public static void setProfileAttribute(String attributeName, Date[] attributeValue) {
        setProfileAttribute(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void addProfileAttributesToSet(String attributeName, long[] attributeValue, Localytics.ProfileScope scope) {
        getProfileHandler().addProfileAttributesToSet(attributeName, attributeValue, scope.getScope());
    }

    public static void addProfileAttributesToSet(String attributeName, long[] attributeValue) {
        addProfileAttributesToSet(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void addProfileAttributesToSet(String attributeName, String[] attributeValue, Localytics.ProfileScope scope) {
        getProfileHandler().addProfileAttributesToSet(attributeName, attributeValue, scope.getScope());
    }

    public static void addProfileAttributesToSet(String attributeName, String[] attributeValue) {
        addProfileAttributesToSet(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void addProfileAttributesToSet(String attributeName, Date[] attributeValue, Localytics.ProfileScope scope) {
        getProfileHandler().addProfileAttributesToSet(attributeName, attributeValue, scope.getScope());
    }

    public static void addProfileAttributesToSet(String attributeName, Date[] attributeValue) {
        addProfileAttributesToSet(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void removeProfileAttributesFromSet(String attributeName, long[] attributeValue, Localytics.ProfileScope scope) {
        getProfileHandler().removeProfileAttributesFromSet(attributeName, attributeValue, scope.getScope());
    }

    public static void removeProfileAttributesFromSet(String attributeName, long[] attributeValue) {
        removeProfileAttributesFromSet(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void removeProfileAttributesFromSet(String attributeName, String[] attributeValue, Localytics.ProfileScope scope) {
        getProfileHandler().removeProfileAttributesFromSet(attributeName, attributeValue, scope.getScope());
    }

    public static void removeProfileAttributesFromSet(String attributeName, String[] attributeValue) {
        removeProfileAttributesFromSet(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void removeProfileAttributesFromSet(String attributeName, Date[] attributeValue, Localytics.ProfileScope scope) {
        getProfileHandler().removeProfileAttributesFromSet(attributeName, attributeValue, scope.getScope());
    }

    public static void removeProfileAttributesFromSet(String attributeName, Date[] attributeValue) {
        removeProfileAttributesFromSet(attributeName, attributeValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void incrementProfileAttribute(String attributeName, long incrementValue, Localytics.ProfileScope scope) {
        getProfileHandler().incrementProfileAttribute(attributeName, incrementValue, scope.getScope());
    }

    public static void incrementProfileAttribute(String attributeName, long incrementValue) {
        incrementProfileAttribute(attributeName, incrementValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void decrementProfileAttribute(String attributeName, long decrementValue, Localytics.ProfileScope scope) {
        getProfileHandler().incrementProfileAttribute(attributeName, -1L * decrementValue, scope.getScope());
    }

    public static void decrementProfileAttribute(String attributeName, long decrementValue) {
        decrementProfileAttribute(attributeName, decrementValue, Localytics.ProfileScope.APPLICATION);
    }

    public static void deleteProfileAttribute(String attributeName, Localytics.ProfileScope scope) {
        getProfileHandler().deleteProfileAttribute(attributeName, scope.getScope());
    }

    public static void deleteProfileAttribute(String attributeName) {
        deleteProfileAttribute(attributeName, Localytics.ProfileScope.APPLICATION);
    }

    public static void setInAppMessageDisplayActivity(FragmentActivity activity) {
        if(activity == null) {
            throw new IllegalArgumentException("attached activity cannot be null");
        } else {
            getMarketingHandler().setFragmentManager(activity.getSupportFragmentManager());
            if(isTestModeEnabled()) {
                getMarketingHandler().showMarketingTest();
            }

        }
    }

    public static void clearInAppMessageDisplayActivity() {
        getMarketingHandler().setFragmentManager((FragmentManager)null);
    }

    public static void triggerInAppMessage(String triggerName) {
        triggerInAppMessage(triggerName, (Map)null);
    }

    public static void triggerInAppMessage(String triggerName, Map<String, String> attributes) {
        triggerInAppMessage(triggerName, attributes, false);
    }

    public static void dismissCurrentInAppMessage() {
        Runnable dismissInAppRunnable = new Runnable() {
            public void run() {
                Localytics.getMarketingHandler().dismissCurrentInAppMessage();
            }
        };
        if(Looper.myLooper() == Looper.getMainLooper()) {
            dismissInAppRunnable.run();
        } else {
            (new Handler(Looper.getMainLooper())).post(dismissInAppRunnable);
        }

    }

    public static void registerPush(String senderId) {
        registerPush(senderId, 0L);
    }

    static void registerPush(String senderId, long delay) {
        getAnalyticsHandler().registerPush(senderId, delay);
    }

    public static String getPushRegistrationId() {
        return getAnalyticsHandler().getPushRegistrationID();
    }

    public static void setPushRegistrationId(String registrationId) {
        getAnalyticsHandler().setPushRegistrationId(registrationId);
    }

    public static void setPushDisabled(boolean disable) {
        getAnalyticsHandler().setPushDisabled(disable);
    }

    public static boolean isPushDisabled() {
        return getAnalyticsHandler().isPushDisabled();
    }

    public static void handlePushNotificationOpened(Intent intent) {
        getMarketingHandler().handlePushNotificationOpened(intent);
    }

    public static void handleTestMode(Intent intent) {
        getMarketingHandler().handleTestModeIntent(intent);
    }

    public static void setTestModeEnabled(boolean enabled) {
        if(Constants.isTestModeEnabled() != enabled) {
            Constants.setTestModeEnabled(enabled);
            if(enabled) {
                getMarketingHandler().showMarketingTest();
            }
        }

    }

    public static boolean isTestModeEnabled() {
        return Constants.isTestModeEnabled();
    }

    public static void setInAppMessageDismissButtonImage(Resources resources, int id) {
        Options options = new Options();
        options.inPurgeable = true;
        options.inPreferredConfig = Config.ARGB_8888;
        Bitmap source = BitmapFactory.decodeResource(resources, id, options);
        if(null == source) {
            Localytics.Log.w(String.format("Cannot load the new dismiss button image. Is the resource id corrected?", new Object[0]));
            getMarketingHandler().setDismissButtonImage((Bitmap)null);
        } else {
            float maxSide = TypedValue.applyDimension(1, 40.0F, resources.getDisplayMetrics());
            Bitmap newImage = scaleDownBitmap(source, maxSide);
            if(newImage != source) {
                source.recycle();
                source = null;
            }

            getMarketingHandler().setDismissButtonImage(newImage);
        }
    }

    public static void setInAppMessageDismissButtonImage(Resources resources, Bitmap image) {
        Bitmap newImage = null;
        if(null != image) {
            float maxSide = TypedValue.applyDimension(1, 40.0F, resources.getDisplayMetrics());
            newImage = scaleDownBitmap(image, maxSide);
            if(newImage == image) {
                newImage = image.copy(Config.ARGB_8888, false);
            }
        }

        getMarketingHandler().setDismissButtonImage(newImage);
    }

    public static void addMessagingListener(MessagingListener listener) {
        getMarketingHandler().addListener(listener);
    }

    public static void removeMessagingListener(MessagingListener listener) {
        getMarketingHandler().removeListener(listener);
    }

    public static void setIdentifier(String key, String value) {
        if("customer_id".equals(key)) {
            setCustomerIdInMemory(value);
        }

        getAnalyticsHandler().setIdentifier(key, value);
    }

    static synchronized void setCustomerIdInMemory(String id) {
        customerID = TextUtils.isEmpty(id)?installationID:id;
    }

    static String getCustomerIdInMemory() {
        return getCustomerIdInMemory(false);
    }

    static String getCustomerIdInMemory(boolean bypassLatch) {
        if(!bypassLatch) {
            try {
                initiatedLatch.await();
            } catch (Exception var4) {
                ;
            }
        }

        Class e = Localytics.class;
        synchronized(Localytics.class) {
            return customerID;
        }
    }

    public static void setCustomerId(String customerId) {
        setIdentifier("customer_id", customerId);
    }

    public static String getCustomerId() {
        return getIdentifier("customer_id");
    }

    public static String getIdentifier(String key) {
        return getAnalyticsHandler().getIdentifier(key);
    }

    public static void setLocation(Location location) {
        getAnalyticsHandler().setLocation(location);
    }

    public static void setLoggingEnabled(boolean enabled) {
        Constants.IS_LOGGING_ENABLED = enabled;
    }

    public static boolean isLoggingEnabled() {
        return Constants.IS_LOGGING_ENABLED;
    }

    public static void setSessionTimeoutInterval(long seconds) {
        Constants.SESSION_EXPIRATION = seconds * 1000L;
    }

    public static long getSessionTimeoutInterval() {
        return Constants.SESSION_EXPIRATION / 1000L;
    }

    public static String getInstallId() {
        String id = installationID;
        if(!TextUtils.isEmpty(id)) {
            return id;
        } else {
            throw new RuntimeException("No installation id!");
        }
    }

    public static String getAppKey() {
        return DatapointHelper.getLocalyticsAppKeyOrNull(appContext);
    }

    public static String getLibraryVersion() {
        return "androida_3.1.1";
    }

    public static void setInAppMessageDismissButtonLocation(Localytics.InAppMessageDismissButtonLocation buttonLocation) {
        getMarketingHandler().setInAppDismissButtonLocation(buttonLocation);
    }

    public static Localytics.InAppMessageDismissButtonLocation getInAppMessageDismissButtonLocation() {
        return getMarketingHandler().getInAppDismissButtonLocation();
    }

    public static String getAnalyticsHost() {
        return Constants.ANALYTICS_HOST;
    }

    public static void setAnalyticsHost(String host) {
        Constants.ANALYTICS_HOST = host;
    }

    public static String getMessagingHost() {
        return Constants.MARKETING_HOST;
    }

    public static void setMessagingHost(String host) {
        Constants.MARKETING_HOST = host;
    }

    public static String getProfilesHost() {
        return Constants.PROFILES_HOST;
    }

    public static void setProfilesHost(String host) {
        Constants.PROFILES_HOST = host;
    }

    Localytics() {
        throw new UnsupportedOperationException("This class is non-instantiable");
    }

    private static HandlerThread getHandlerThread(String name) {
        HandlerThread thread = new HandlerThread(name, 10);
        thread.start();
        return thread;
    }

    static AnalyticsHandler getAnalyticsHandler() {
        if(null == analyticsHandler) {
            throw new Localytics.LocalyticsNotInitializedException(null);
        } else {
            return analyticsHandler;
        }
    }

    static MarketingHandler getMarketingHandler() {
        if(null == marketingHandler) {
            throw new Localytics.LocalyticsNotInitializedException(null);
        } else {
            return marketingHandler;
        }
    }

    static ProfileHandler getProfileHandler() {
        if(null == profileHandler) {
            throw new Localytics.LocalyticsNotInitializedException(null);
        } else {
            return profileHandler;
        }
    }

    static void triggerInAppMessage(String event, Map<String, String> attributes, boolean delay) {
        getMarketingHandler().displayMarketingMessage(event, attributes, delay);
    }

    static void setScreenFlow(List<String> screens) {
        getAnalyticsHandler().setScreenFlow(screens);
    }

    static void setReferrerId(String referrerId) {
        getAnalyticsHandler().setReferrerId(referrerId);
    }

    static void handleRegistration(Intent intent) {
        getAnalyticsHandler().handleRegistration(intent);
    }

    static void handleNotificationReceived(Intent intent) {
        getMarketingHandler().handleNotificationReceived(intent);
    }

    static Map<String, String> getIdentifiers() {
        return getAnalyticsHandler().getIdentifiers();
    }

    private static Bitmap scaleDownBitmap(Bitmap source, float maxSide) {
        int largerSide = Math.max(source.getWidth(), source.getHeight());
        float aspectRatio = (float)source.getWidth() / (float)source.getHeight();
        if((float)largerSide > maxSide) {
            Bitmap scaledDown;
            if(source.getWidth() >= source.getHeight()) {
                scaledDown = Bitmap.createScaledBitmap(source, (int)maxSide, (int)(maxSide / aspectRatio + 0.5F), true);
            } else {
                scaledDown = Bitmap.createScaledBitmap(source, (int)(maxSide * aspectRatio + 0.5F), (int)maxSide, true);
            }

            if(null == scaledDown) {
                Localytics.Log.w(String.format("Cannot scale down the new dismiss button image.", new Object[0]));
            }

            return scaledDown;
        } else {
            return source;
        }
    }

    static void incrementActivityCounter() {
        ++activityCounter;
    }

    static void decrementActivityCounter() {
        --activityCounter;
    }

    static boolean isAppInForeground() {
        return activityCounter > 0;
    }

    static boolean isAutoIntegrate() {
        return isAutoIntegrate;
    }

    static void setIsAutoIntegrate(boolean autoIntegrate) {
        isAutoIntegrate = autoIntegrate;
    }

    private static boolean classInManifest(ActivityInfo[] infoArray, String className) {
        if(null != infoArray) {
            ActivityInfo[] arr$ = infoArray;
            int len$ = infoArray.length;

            for(int i$ = 0; i$ < len$; ++i$) {
                ActivityInfo info = arr$[i$];
                if(info.name.equalsIgnoreCase(className)) {
                    return true;
                }
            }
        }

        return false;
    }

    static Object throwOrLogError(Class exceptionToThrowClass, String errorMessage) {
        return throwOrLogError(exceptionToThrowClass, errorMessage, (Exception)null);
    }

    static Object throwOrLogError(Class exceptionToThrowClass, String errorMessage, Exception stacktraceException) {
        return null;
    }

    public static final class LocalyticsNotInitializedException extends RuntimeException {
        private LocalyticsNotInitializedException() {
            super("You must first initialize Localytics");
        }
    }

    static final class Log {
        Log() {
        }

        static int d(String msg) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.d("Localytics", msg):-1;
        }

        static int d(String msg, Throwable tr) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.d("Localytics", msg, tr):-1;
        }

        static int e(String msg) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.e("Localytics", msg):-1;
        }

        static int e(String msg, Throwable tr) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.e("Localytics", msg, tr):-1;
        }

        static int i(String msg) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.i("Localytics", msg):-1;
        }

        static int i(String msg, Throwable tr) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.i("Localytics", msg, tr):-1;
        }

        static int v(String msg, Throwable tr) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.v("Localytics", msg, tr):-1;
        }

        static int v(String msg) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.v("Localytics", msg):-1;
        }

        static int w(Throwable tr) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.w("Localytics", tr):-1;
        }

        static int w(String msg, Throwable tr) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.w("Localytics", msg, tr):-1;
        }

        static int w(String msg) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.w("Localytics", msg):-1;
        }

        static int wtf(Throwable tr) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.wtf("Localytics", tr):-1;
        }

        static int wtf(String msg, Throwable tr) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.wtf("Localytics", msg, tr):-1;
        }

        static int wtf(String msg) {
            return Constants.IS_LOGGING_ENABLED?android.util.Log.wtf("Localytics", msg):-1;
        }
    }

    public static enum ProfileScope {
        ORGANIZATION("org"),
        APPLICATION("app");

        private final String scope;

        private ProfileScope(String sc) {
            this.scope = sc;
        }

        public String getScope() {
            return this.scope;
        }
    }

    public static enum InAppMessageDismissButtonLocation {
        LEFT,
        RIGHT;

        private InAppMessageDismissButtonLocation() {
        }
    }
}
